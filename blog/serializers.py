# This is a very important file. It will help me translate complex django models into native python data types that can be rendered into JSON/XML for my frontend integration.

from rest_framework import serializers # imports the serializers module from the Django rest_framework package. it contains tools needed to define how my models are converted to and from JSON.
from .models import Post, Comment, Category


class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name']


class CommentSerializer(serializers.ModelSerializer): # modelserializer generates fields for your table based on the model, saving you time from creating it manually urself.
    author = serializers.ReadOnlyField(source="author.username") # read-only field because it can't be modified directly through the API. it gets the username of the author from the related User model. u don't want users to change the author of a comment when creating or updating it.
    # the source argument tells the serializer where to get the value from. in this case, it navigates through the foreign key relationship to get the username of the author of the comment and displays their username instead of just their ID.

     # many=True indicates that a post can belong to multiple categories. read_only=True means that categories can't be added or modified directly through the PostSerializer; they are managed separately through the CategorySerializer.
    class Meta: # provides configuration options for the serializer.
        model = Comment # tells which django model to use as its base.
        fields = ["id", "author", "content", "created_at"] # lists specific fields to include in the serialized output. the id field is automatically generated by django as a primary key for each model instance. including it helps uniquely identify each comment when it's serialized.


class PostSerializer(serializers.ModelSerializer):
    author = serializers.ReadOnlyField(source="author.username")
    comments = CommentSerializer(many=True, read_only=True) # nested serializer to include all comments related to a post. many=True indicates that a post can have multiple comments. read_only=True means that comments can't be added or modified directly through the PostSerializer; they are managed separately through the CommentSerializer.

    categories = serializers.StringRelatedField(many=True, read_only=True)
    class Meta:
        model = Post
        fields = ["id", "title", "content", "author", "created_at", "updated_at", "comments", "categories"] # includes the comments field in the serialized output, allowing clients to see all comments associated with a post when they retrieve post data.

